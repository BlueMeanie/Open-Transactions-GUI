
There are certain files (keys, etc) that need to be in the SSL-Example folder 
(for client AND server -- both have their own different versions of that folder).

You can generate those files in the ssl folder by typing make. (Already done FYI.) 
Then copy the appropriate files to the client and server SSL-Example folders.


** I have generated these files already and put them in the appropriate directories,
with all the test passwords set to "test". So if you just want to try it out, you're
already GOOD TO GO! 

** But if you would like to erase all the certs, these are the instructions for
re-creating them in a format that the software will use.


===> HOW IS THIS ALL DONE?

1) Go to the main project folder and then:  cd ssl


1.1 (optional) To erase the certs that I generated: 
   make dhparamclean; make certclean   
ONLY IF YOU WANT TO WIPE THE CERTS I GENERATED.
Make sure if you do this, to wipe them out of the client and server SSL-Example folders
as well (the crt and pem files.)

2) To generate certs, dhparams, (everything), Just type "make" and hit enter.

3) Once they are created, some of the certs need to be copied to the server's SSL-Example
folder, and some of the files need to be copied to the client's SSL-Example folder.

cd ..

(now we are in the main project folder again.)

===> TO COPY THE SERVER FILES:
cp ./ssl/rootcert.pem ./transaction/SSL-Example/ca.crt; 
cp ./ssl/dh1024.pem ./transaction/SSL-Example/dh_param_1024.pem; 
cat ./ssl/servercert.pem ./ssl/serverkey.pem ./ssl/serverCAcert.pem ./ssl/rootcert.pem >./transaction/SSL-Example/server.pem; 

A copy of that server.pem also needs to go into the transaction/certs folder,
under the filename of the server's ID. I have already put it there but if you recreate,
you need to put the new one there.
cp ./transaction/SSL-Example/server.pem ./transaction/certs/SERVER_ID_GOES_HERE


===> TO COPY THE CLIENT FILES:
cp ./ssl/rootcert.pem ./testwallet/SSL-Example/ca.crt; 
cp ./ssl/client.pem ./testwallet/SSL-Example/client.pem; 

A copy of the client.pem needs to go into the testwallet/certs folder.
(This is for the actual User account on the server, versus SSL-Example 
where we are using the same cert for the lower-level SSL socket code.)
As we transition away from test client to a real client, we won't have this.

cp ./ssl/client.pem ./testwallet/certs/USER_ID_AKA_NYM_ID_GOES_HERE


4) Make sure the HARDCODED values are correct in the source code (Sorry.)

===> Unfortunately, these files are HARDCODED on the server (not for much longer)
server.cpp, near the top:
#define CA_FILE             "SSL-Example/ca.crt"
#define DH_FILE             "SSL-Example/dh_param_1024.pem"
#define KEY_FILE            "SSL-Example/server.pem"


===> These files are HARDCODED on the client (the test client...)
OTServerConnection.h, near the top:#define CA_FILE             "SSL-Example/ca.crt"
#define KEY_FILE            "SSL-Example/client.pem"
#define KEY_PASSWORD        "test"  // RIGHT NOW THE PASSWORD FOR CONNECTING TO THE SERVER IS 
HARDCODED HERE.  TODO: config file, password prompt.

5) By generating new certs, you have caused the server's User ID, 
as well as the client's default User ID, to be changed. (The ID is
a hash of the public key for each user, so by changing the key, you
also change the ID.)

When you first try to load the software, it will complain that the IDs are 
wrong.

When this happens, just look at what the new ID is (it will show the old one 
and the new one) then edit transaction/notaryServer.xml and 
testwallet/wallet.xml to fix the server's User ID as well as the 
client's Nym ID.

At this time, if you load the wallet, it will be unable, because the Nym ID
does not match the filenames in certs/ and nyms/.

So you need to erase the old cert in the cert folder, and put the new one there
based on the new UserID (NymID).
That's the same ID you just added to the wallet.xml and notaryServer.xml files.

Since the Nym ID is a hash of the cert, the cert file is  easy to verify. The software
just loads it up, hashes it, and compares to the ID.

But the nym file is not so easy to verify, since it uses the same ID, which
will obviously not come from a hash of the nymfile as well. So the Nym is 
stored in an OTSignedFile. The ID is inside the signed file. So it's not
enough just to put a Nym there with the right filename. You couldn't just
edit the nym ID inside the one that's already there.  You could, but then
the signature would no longer verify.

So the Nymfile has to be re-created... 

Until I add a "AddNym" function, for now I have a line of code in OTServer.cpp
(for the server nym) and similar line of code in the testwallet (I think OTClient.cpp).
SEARCH FOR THE WORD:  SaveSignedNymfile.  You can see I have this commented out and 
possibly code near it.  Just uncomment that code and run it. IT WILL GENERATE THE NEW
NYM AND SAVE IT TO THE FILE.  Then comment it out again, recompile, and you are good
to go.

NOPE: not so simple.  For the nymfiles, it's not enough to load them and save them again.
You actually have to EDIT THEM to the new values, then uncomment the code I mentioned
above, recompile and run. Normally the server, or wallet, loads a nym, verifies the signature,
and dumps it if it fails. But with the code uncommented (as discussed), it will load it
and then SAVE IT AGAIN REGARDLESS OF WHETHER IT VERIFIED WHILE LOADING.

This makes it easy to create new NymFiles until the "GenerateNym" function is added.

POINT BEING: When you do this, it will load the nymfile, SIGNATURE FAIL, and then SAVE ANYWAY.
So you still have to edit the nymfile to put in the new values (which is why the signature
fails) but it's okay because your new value will be saved with a NEW signature, a good
signature,  Then you can comment the code back out again, rebuild, and you are good to go.

UPDATE: STILL MORE:  All the nym files are fixed now, and certs, etc. But because the Nyms
have a new public key, that means the CONTRACTS must be RE-SIGNED!

Here's what I just did for the SERVER CONTRACT:
1) Edited the server contract to remove the PGP signature information from top and bottom.
2) While editing, I replaced the contents of the first key (or cert) with the new one.
   To be clear: the first cert in the server.pem file should also be the first cert in
   the server's contract.
3) BECAUSE I just changed the server's contract, I had to RE-SIGN THE CONTRACT.
   So I used the signcontract utility to do this.
4) This will cause the SERVER CONTRACT to have a new hash, and thus a new SERVER ID.
   So now the server USER Id got changed (the nym ID) as well as the Server ID (contract hash.)
5) I ran the testwallet and tried to load the new server contract (with the new signature.)
   It FAILED loading the contract because the hash of the contract didn't match the old ID.
   (Expected.) But when it failed, it gave me the new ID, so I copied that and edited the 
   wallet file to update the server ID. Upon loading it a second time, it SUCCEEDED!
6) Next I edited the notaryServer.xml file to fix the server ID there as well.
   The server User ID had already been updated when I generated the certs (above.)

The same above steps must be repeated for each asset contract, using the user's default
nym instead of the server nym.  (It is the users who upload the asset contracts. The
user cannot issue any currency unless HE has signed the asset contract that he's uploading.
Therefore, unless the user's nym is used to sign those contracts, he cannot upload them
and test the issuing -- and therefore trading -- on the system.)

