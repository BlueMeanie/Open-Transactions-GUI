
NOTES on the Version:

// ---------------------------------------------------------------------

   0.25 --- All FILE * were removed and replaced with C++ fstreams.
            
            An all new logging class, with errors, asserts, and multi-
            verbosity output. See the OTLog.h and .cpp files for more.
            (Centralizing the output and logging also helps porting efforts.)

            All the test certs were regenerated, and the contracts were
            re-signed, etc. This time they will last for 10 years, instead
            of 30 days. Slight fix to the Open-Transactions/ssl Makefile.

   0.24 --- FreeBSD working!

   0.23 --- Android version! (In support of our upcoming Android client.)
            UPDATE: this port is still ongoing, NOT perfect! Android has
            many custom things and limitations.

   0.22 --- EASY Makefiles and project files are now available for the
            JNI Java interface, as well as the high-level C++ API.
            
            Now it's easier than ever to use Open Transactions in your
            Java and C++ applications, for Mac, Linux, and Windows!

            Makefiles are supplied for MAC and LINUX, as well as project
            files for XCode on Mac and MS Visual C++ 2010 Express on
            Windows. 
 
            "FiatCash" (the first client, on Android) is humming along
            and hopefully we'll have some basic version soon up on Github.

            Negative transactions are no longer allowed for vouchers,
            account transfers, or cash withdrawals. They are still,
            however, allowed for cheques, which serve as invoices.

            Various global variable issues were cleaned up...

   0.21 --- Windows release!

           Open Transactions now supports Windows, LINUX, and Mac OS X.
           (In the same code base.)
           
           This distribution comes with gcc Makefiles for Mac and Linux,
           as well as XCode project files for Mac and Microsoft VC++
           project files for Windows.
           
           The Windows port was at the request of an Android developer who
           has begun work on a wallet (client app) that he calls
           "FiatCash".
           He will be building it on Windows, in Java, using the Open
           Transactions JNI interface to talk to the library. When
           complete, the wallet software will run on Android phones.
           
           INVOICES: Imagine that you hand someone an invoice. He runs it
           through his bank account and the money is automatically
           transferred to you, with receipts on both sides. This is the
           same thing as a cheque with a negative amount. Thus, "negative
           cheques" can be used as invoices. (Already operational.)
           
           Assorted:
           
           Many of the C Standard Library includes were replaced with their
           C++ standard library versions.
           
           Other cleanups were made including some fixes to OTString (which
           used to have some large stack-allocations) as well as a bug fix
           in the socket code for the server / test client.

           The client cert expired, so I re-created all the certs. If you
           have any problem with your own, just install the new version to
           fix it.
           
// ---------------------------------------------------------------------

   0.2 --- Major Release!  ALL NEW:

           JNI Interface (High-level Java API)

           High-level C++ Interface

           Spent Token Database is fully operational!

           Mints and Tokens now support Expiration AND Series. 

           New Financial Instruments: Cheques and Vouchers.

           Reserve accounts are now working to store the backing funds
           for cash withdrawals and vouchers (cashier's cheques.)

           Transaction numbers are fully working now.
           
           Nym files are now signed (to prevent tampering.)

           Hardcoding of paths was fixed, using config files and
           command-line arguments now, so you can use the software 
           without having to change the code.

           Path separators were improved to support Windows-style paths
           (though I haven't tried to actually build on Windows.)

           Numerous bug fixes. Including a big one: discarding
           token signature after unblinding.


// ---------------------------------------------------------------------

  0.11 --- Added LINUX support... 

           Added Makefiles, and a few fixes related to Linux. 
           
           OT now runs on TWO platforms: LINUX and Mac OS X.

// ---------------------------------------------------------------------

  0.1  --- The original goal was just proof-of-concept. There are many
           TODOs listed on the project page, as well as throughout the
           code.  But it all works!!!
		   
   A WARNING: This software is brand-spanking-new.  The project has not
yet been audited for security or tested for any extended period of time.
Thus far, it must be considered as for experimental purposes only.
		   
       --- There are still a few values that are hardcoded (in the client
           and the server), unfortunately, but it's all documented and I
           have everything set up already to run, so you don't have to
           mess with them. This will be fixed next release.
 
----------------------------------------------------------------------

The server expects its OWN cert to be in the  transaction/certs folder.
The filename should be the server_user_ID from notaryServer.xml
(I HAVE ALREADY PLACED IT THERE.)

This is the file that includes the server's public AND private key.

----------------------------------------------------------------------

