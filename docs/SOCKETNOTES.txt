
There are certain files (keys, etc) that need to be in the SSL-Example folder 
(for client AND server -- both have their own different versions of that folder).

You can generate those files in the ssl folder by typing make. (Already done FYI.) 
Then copy the appropriate files to the client and server SSL-Example folders.


** I have generated these files already and put them in the appropriate directories,
with all the test passwords set to "test". So if you just want to try it out, you're
already GOOD TO GO! 

** But if you would like to erase all the certs, these are the instructions for
re-creating them in a format that the software will use.


===> HOW IS THIS ALL DONE?

1) Go to the main project folder and then:  cd ssl


1.1 (optional) To erase the certs that I generated: 
   make dhparamclean; make certclean   
ONLY IF YOU WANT TO WIPE THE CERTS I GENERATED.
Make sure if you do this, to wipe them out of the client and server SSL-Example folders
as well (the crt and pem files.)

2) To generate certs, dhparams, (everything), Just type "make" and hit enter.

3) Once they are created, some of the certs need to be copied to the server's SSL-Example
folder, and some of the files need to be copied to the client's SSL-Example folder.

cd ..

(now we are in the main project folder again.)

===> TO COPY THE SERVER FILES:
cp ./ssl/rootcert.pem ./transaction/SSL-Example/ca.crt
cp ./ssl/dh1024.pem ./transaction/SSL-Example/dh_param_1024.pem
cat ./ssl/servercert.pem ./ssl/serverkey.pem ./ssl/serverCAcert.pem ./ssl/rootcert.pem >./transaction/SSL-Example/server.pem

A copy of that server.pem also needs to go into the transaction/certs folder,
under the filename of the server's ID. I have already put it there but if you recreate,
you need to put the new one there.
cp ./transaction/SSL-Example/server.pem ./transaction/certs/SERVER_ID_GOES_HERE


===> TO COPY THE CLIENT FILES:
cp ./ssl/rootcert.pem ./testwallet/SSL-Example/ca.crt
cp ./ssl/client.pem ./testwallet/SSL-Example/client.pem

A copy of the client.pem needs to go into the testwallet/certs folder.
(This is for the actual User account on the server, versus SSL-Example 
where we are using the same cert for the lower-level SSL socket code.)
As we transition away from test client to a real client, we won't have this.

cp ./ssl/client.pem ./testwallet/certs/USER_ID_AKA_NYM_ID_GOES_HERE


4) Make sure the HARDCODED values are correct in the source code (Sorry.)

===> Unfortunately, these files are HARDCODED on the server (not for much longer)
server.cpp, near the top:
#define CA_FILE             "SSL-Example/ca.crt"
#define DH_FILE             "SSL-Example/dh_param_1024.pem"
#define KEY_FILE            "SSL-Example/server.pem"


===> These files are HARDCODED on the client (the test client...)
OTServerConnection.h, near the top:#define CA_FILE             "SSL-Example/ca.crt"
#define KEY_FILE            "SSL-Example/client.pem"
#define KEY_PASSWORD        "test"  // RIGHT NOW THE PASSWORD FOR CONNECTING TO THE SERVER IS 
HARDCODED HERE.  TODO: config file, password prompt.


