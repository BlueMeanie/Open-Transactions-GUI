

OpenTransactions


 --- Open Transactions is currently built on:
     - Mac OSX 10.6.4 (Snow Leopard)
     - Ubuntu Linux 2.6.32.
 
 --- OpenSSL version 1.0.0a (at least) is necessary, since the SAMY hash 
     uses WHRLPOOL. (XOR'd with SHA-512.) WHIRLPOOL is a new addition to 
     OpenSSL.
 
 --- Let me know if there are any problems, since this is new software;
     this will be a living document.
 



TO BUILD:

--- Make sure OpenSSL 1.0.0a is installed, earlier versions don't have
    WHIRLPOOL.

--- Find libssl.a and libcrypto.a and copy them to the OTLib folder.

--- cd (change directory) to the Open-Transactions folder.

--- Edit (using vi or whatever) transaction/server.cpp and search for the
    word REDACTED. When you find it, fix the path there to whatever is
    appropriate for your system. 

    NOTE: this is configurable now on the command line, but it will still
    be more convenient for you to do the edit. It's easy and painless.

    You will also need to make the same fix into the notaryServer.xml file.

    In fact, here are all the places that you will probably want to edit:

fgrep -n REDACTED Open-Transactions/transaction/*

notaryServer.xml:9: contract="/Users/REDACTED/Projects/Open-Transactions/transaction/contracts/d7a11ee80460a10b91a4ad49069a7fc2a34c349433ffbd33dad7e31ba8b170d482c524a911c1569ccde5a11e680c2c6b00053d5fc718b7a884057352f56060b9" /> 

server.cpp:106:#define SERVER_PATH_DEFAULT	"C:\\Users\\REDACTED\\Projects\\Open-Transactions\\transaction"

server.cpp:113:#define SERVER_PATH_DEFAULT	"/Users/REDACTED/Projects/Open-Transactions/transaction"
 

--- You will want to make similar edits in the Open-Transactions/testwallet folder:

fgrep -n REDACTED *

client.cpp:119:#define SERVER_PATH_DEFAULT	"C:\\Users\\REDACTED\\Projects\\Open-Transactions\\testwallet"

client.cpp:125:#define SERVER_PATH_DEFAULT	"/Users/REDACTED/Projects/Open-Transactions/testwallet"

wallet.xml:6: file="/Users/REDACTED/Projects/Open-Transactions/testwallet/nyms/5bce5c3e8c18d05a36fb31845830fba3b45542ac1010739037a00714205fc99bd716a3ee94f3c5ff66a8b0fa6d887af962ef3df31e3e353c0263d68b09897726">

wallet.xml:10: contract="/Users/REDACTED/Projects/Open-Transactions/testwallet/contracts/d7a11ee80460a10b91a4ad49069a7fc2a34c349433ffbd33dad7e31ba8b170d482c524a911c1569ccde5a11e680c2c6b00053d5fc718b7a884057352f56060b9" /> 

wallet.xml:17: file="/Users/REDACTED/Projects/Open-Transactions/testwallet/accounts/290aebfe999c2435827af77c7b14ead4c5b43bdafa72fb5e8dab11f9080555fa50646441d98602d63872f2f80178a3a0cfaff7ab832dde2e372603508d63ea90"

wallet.xml:23: file="/Users/REDACTED/Projects/Open-Transactions/testwallet/accounts/facf08eaf3558a6505c817b99285b3a2614d3debcf3dc6a1a960aafdb7e154b5d68dd370751ea637abe933f9269f288bd6aaa34be6340e0c8a169312599e43d6"


IN ALL OF THE ABOVE CASES, the cpp file doesn't *have* to be changed since you can 
now configure the path on the command line. But the wallet.xml file DOES have to be
edited, since that is currently the config file for the application. So make sure
you do these edits, everything will go smoothly.


NOW YOU ARE READY TO COMPILE THE CODE:

--- Build the Library:
cd OTLib;
make

--- Build the server:
cd ../transaction;
make

--- Build the client:
cd ../testwallet;
make




--- Make sure! You have at least version 1.0.0a of OpenSSL installed.

   (HOW did I install OpenSSL?  My Mac already came with an old version of it. So first I downloaded the OpenSSL latest build, and followed the instructions to install that. I also installed a program called "MacPorts" (google it) and used that to install OpenSSL as well, which went into the /opt folder.  I also had to search my computer for libssl.a and libcrypto.a (using  spotlight in finder) and, after backing up the old files, I overwrote them with the new ones. I did the same for the header files and the dylib files. Most notably, the Mac development version of OpenSSL is in the /Developer SDK folders. I replaced the headers and libraries and dylibs in there and wherever else I could find that I could replace them.  I got the NEW dylib files from the MacPorts install, and I got the NEW .a files from the OpenSSL download and build.  Make sure the "make install" for the OpenSSL download is done using sudo. sudo make install.) 



TO RUN:

The client and server expect to be run from the command line in their respective folders. 

cd testwallet       (for client) 
cd transaction      (for server)

(Assuming you have already built the projects, including OTLib first.)

If you are in the transaction folder, then run it like this:
./transaction


if you are in the testwallet folder, then run the wallet like this:
./testwallet


You don't have to specify a hostname and port, because the server contract
already contains that information.

In the server contract that comes with this test distribution,
the hostname is localhost and port is 7085



USING THE SOFTWARE:

I already created your user account. The password is test (always)

==> With the server, all you can do is watch the output as it runs.

==> But with the client, there is a command-line interface. 

**** READ:  docs/CLIENT-COMMANDS.txt  for a list of the Wallet's commands.
I will soon add that file to a help command inside the wallet.
You can create asset accounts, issue new asset types, 
transfer assets, get inbox, process inbox,
withdraw cash, deposit cash, getcontract, getmint.
You can also create basket currencies and exchange between normal 
asset accounts and basket accounts. (To the server it's just another 
account type.)  You can also write and deposit cheques, and withdraw 
vouchers. 

REMEMBER: If you move some assets, and you don't see the change show up in your 
account, then you probably just need to type "get" (to get the latest copy of the 
account after a change has just been made.) Another useful command is 'i' for 
grabbing the inbox of any specific account. Then "get", and then "stat" to see 
the balances change.

Obviously a nice client will do this automatically.



Let's organize to make a pretty GUI for various platforms, eh?


------------------------------------




