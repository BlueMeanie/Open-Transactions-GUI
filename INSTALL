OpenTransactions


 --- Open Transactions is currently built on a Mac OSX 10.6.4 (Snow Leopard)
 
 --- OpenSSL version Version 1.0.0a (at least) is necessary, since the SAMY hash 
     uses WHRLPOOL. (XOR'd with SHA-512.) WHIRLPOOL is a new addition to OpenSSL.
 
 --- Let me know if there are any problems, since this is new software; this will be a
     living document.
 


TO BUILD:
--- In ALL THREE PROJECTS (OTLib, transaction, and testwallet) edit the project file
    and find ALL occurrences of the word REDACTED. In those places, you will need to adjust
    the path to match whatever you are using on your own system.
    Come to think of it, you will need to do this with the 2 utility projects as well.
    util/otcreatemint and util/signcontract.  

    For example:

    cd transaction
    cd transaction.xcodeproj
    fgrep -n -R REDACTED *

    Edit the file project.pbxproj with a text editor and fix the path.  Wherever you
    see REDACTED, just change it so that the path you see reflects what it should be
    on YOUR system. Once you do this, the projects will be able to find the library
    and all the headers, etc.  Just search for REDACTED and you will see what to do.


--- OTLib expects libcrypto.a and libssl.a. If you open the project, you can see those files
    are listed in red, because the actual .a files are missing.  (I deleted them before 
    distributing this code.) So just find the .a files on your system and copy them into the
    OTLib folder before building.  I'm using OpenSSL 1.0.0a now, so you should have at least
    that version as well.

--- Open OTLib in XCode.  SHIFT-COMMAND-K  (Make all clean) Then COMMAND-B (BUILD)

--- AT THIS POINT, YOU SHOULD BE READY TO BUILD THE CLIENT AND SERVER.

--- Once the library is built, copy OTLib/build/Debug/libOTLib.dylib to /usr/local/lib
    For good measure, copy it to ./testwallet and ./transaction as well.
    In fact, copy it to util/signcontract and util/otcreatemint as well.

--- OPEN transaction and testwallet projects in XCode, and build them the same way.
    (SHIFT-COMMAND-K followed by COMMAND-B)
    You can also build the createmint and signcontract utilities projects in the same way.


Eventually OTLib will be statically linked, not dynamically, but this is just for testing.




TO RUN:

The client and server expect to be run from the command line in the same folder 
as the .xcodeproj file is in (ie each prefers its own main folder.) 
For either:

cd testwallet       (for client) 
-- OR -- 
cd transaction      (for server)

(Assuming you have already built the projects, including the OTLib library first.)



EXECUTING THE BINARIES:

If you are in the transaction folder, then run it like this:
./build/Debug/transaction

if you are in the testwallet folder, then run the wallet like this:
./build/Debug/testwallet

OR copy the binary up to the testwallet or transaction folder from its build/Debug
folder and RUN IT FROM THERE. I have to fix the path and config file stuff, and I
just haven't done it yet, so YOU have to make sure you are in the right folder when
you run it.


You don't have to specify a hostname and port, because the server contract
already contains that information.

In the server contract that comes with this test distribution,
the hostname is localhost and port is 7085



USING THE SOFTWARE:

I already created your user account. The password is test (always)

==> With the server, all you can do is watch the output as it runs.

==> But with the client, there is a command-line interface. 

**** READ:  docs/CLIENT-COMMANDS.txt  for a list of the Wallet's commands.
I will soon add that file to a help command inside the wallet.
You can create asset accounts, issue new asset types, 
transfer assets, get inbox, process inbox,
withdraw cash, deposit cash, getcontract, getmint.
You can also create basket currencies and exchange between normal asset accounts
and basket accounts. (To the server it's just another account type.)

REMEMBER:  If you move some assets, and you don't see the change show up in your 
account, then you probably just need to type "get" (to get the latest copy of the 
account after a change has just been made.) Another useful command is 'i' for
grabbing the inbox of any specific account. Then "get", and see the balances change.

Obviously a nice client will do this automatically.



Let's organize to make a pretty GUI for various platforms, eh?


------------------------------------















