/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class OpenTransactionsJNI */

#ifndef _Included_OpenTransactionsJNI
#define _Included_OpenTransactionsJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     OpenTransactionsJNI
 * Method:    loadWallet
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_loadWallet
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    generatePseudonym
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_generatePseudonym
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    addPseudonym
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_addPseudonym
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    addServerContract
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_addServerContract
  (JNIEnv *, jobject, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    connectServer
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_OpenTransactionsJNI_connectServer
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    processSockets
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_processSockets
  (JNIEnv *, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    checkServerID
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_checkServerID
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    createUserAccount
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_createUserAccount
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    checkUser
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_checkUser
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getRequest
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_getRequest
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    issueAssetType
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_issueAssetType
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getContract
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_getContract
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getMint
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_getMint
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    createAssetAccount
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_createAssetAccount
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getAccount
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_getAccount
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    issueBasket
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_issueBasket
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    exchangeBasket
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_exchangeBasket
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getTransactionNumber
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_getTransactionNumber
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    notarizeWithdrawal
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_notarizeWithdrawal
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    notarizeDeposit
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_notarizeDeposit
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    notarizeTransfer
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_notarizeTransfer
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getInbox
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_getInbox
  (JNIEnv *, jobject, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    processInbox
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_processInbox
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    withdrawVoucher
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_withdrawVoucher
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    depositCheque
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_depositCheque
  (JNIEnv *, jobject, jstring, jstring, jstring, jstring);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getNymCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_OpenTransactionsJNI_getNymCount
  (JNIEnv *, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getNym
 * Signature: (ILjava/lang/StringBuffer;Ljava/lang/StringBuffer;)Z
 */
JNIEXPORT jboolean JNICALL Java_OpenTransactionsJNI_getNym
  (JNIEnv *, jobject, jint, jobject, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getServerCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_OpenTransactionsJNI_getServerCount
  (JNIEnv *, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getServer
 * Signature: (ILjava/lang/StringBuffer;Ljava/lang/StringBuffer;)Z
 */
JNIEXPORT jboolean JNICALL Java_OpenTransactionsJNI_getServer
  (JNIEnv *, jobject, jint, jobject, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getAssetTypeCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_OpenTransactionsJNI_getAssetTypeCount
  (JNIEnv *, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getAssetType
 * Signature: (ILjava/lang/StringBuffer;Ljava/lang/StringBuffer;)Z
 */
JNIEXPORT jboolean JNICALL Java_OpenTransactionsJNI_getAssetType
  (JNIEnv *, jobject, jint, jobject, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getAccountCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_OpenTransactionsJNI_getAccountCount
  (JNIEnv *, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    getAccountByIndex
 * Signature: (ILjava/lang/StringBuffer;Ljava/lang/StringBuffer;)Z
 */
JNIEXPORT jboolean JNICALL Java_OpenTransactionsJNI_getAccountByIndex
  (JNIEnv *, jobject, jint, jobject, jobject);

/*
 * Class:     OpenTransactionsJNI
 * Method:    InitOTAPI
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_OpenTransactionsJNI_InitOTAPI
  (JNIEnv *, jclass, jstring);

#ifdef __cplusplus
}
#endif
#endif
