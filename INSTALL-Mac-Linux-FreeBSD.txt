

OpenTransactions for Mac OS X, Linux, and FreeBSD


 --- Open Transactions is currently built on:
     - Linux Ubuntu 2.6.32 and FreeBSD using g++/gcc.
     - Mac OS X 10.6.4 (Snow Leopard) using XCode as well as gcc
     - Windows 7 using MS Visual C++ 2010 Express.
     - Android 8 using NDK.
 
 --- OpenSSL version 1.0.0a (at least) is necessary, since the SAMY hash 
     uses WHRLPOOL. (XOR'd with SHA-512.) WHIRLPOOL is a new addition to 
     OpenSSL.
 
 --- Let me know if there are any problems, since this is new software;
     this will be a living document.
 



PRE-BUILD:

--- Make sure OpenSSL 1.0.0a is installed, since earlier versions don't
    have WHIRLPOOL and the software won't work without it.

    To check current version:  openssl version

    * To upgrade on Mac:    sudo port install openssl
      If that doesn't work: sudo port install openssl-devel

    * On Linux: sudo apt-get install openssl

    * On FreeBSD (as root):  cd /usr/ports/security/openssl/ && make install clean


--- cd (change directory) to the Open-Transactions folder. <=== ("THE MAIN FOLDER")


------------------------------------------------------------------------
XCode NOTES:  (IGNORE this section if you aren't using XCode on Mac.)

It's better to just use the Makefile. But if you prefer to use the XCode
project files, then you need to fix the REDACTED inside those.

XCode project files are:
Open-Transactions/OTLib/OTLib.xcodeproj/project.pbxproj
Open-Transactions/testwallet/testwallet.xcodeproj/project.pbxproj
Open-Transactions/transaction/transaction.xcodeproj/project.pbxproj

Edit those three files and fix wherever it says REDACTED (it will be
a path -- just set it to whatever path is correct for your own system, 
you will see what I mean.)

    To search for all occurrences, use this command from the "main" folder:  
    fgrep -n REDACTED * */* */*/* */*/*/*

    Make sure to replace the REDACTED (entire path) with whatever
    path is appropriate for your system.

TWO more XCode notes:
1) The include path issue is addressed by changing:
Search Paths->Header Search Paths = "/opt/local/include" instead
of "/usr/local/include" (So you get the macports version of OpenSSL,
which is 1.0.0a, instead of the default version, which is 0.9.8)

2) You also have to change a couple links that the Mac system uses to
point at the "current" OpenSSL:

sudo rm /usr/lib/libcrypto.dylib
sudo ln -s /opt/local/lib/libcrypto.1.0.0.dylib /usr/lib/libcrypto.dylib
sudo rm /usr/lib/libssl.dylib
sudo ln -s /opt/local/lib/libssl.1.0.0.dylib /usr/lib/libssl.dylib

Now you should be good to go with XCode!

------------------------------------------------------------------------



NOW YOU ARE READY TO COMPILE THE CODE:


To build everything, use this command:

      make

Or:   make PLATFORM=[darwin|linux|freebsd]


(It WILL try to auto-detect your operating system.)

If you prefer to build in XmlRpc mode (preferred) then use this instead:
   
      make rpc
Or:   make rpc PLATFORM=[darwin|linux|freebsd]


Other build targets are debug, debugrpc, and clean.



*For FreeBSD, make sure you have gmake installed, since the Makefiles won't
work with the default version of make. Once you install it, you can build
using these commands, depending on which options you prefer:
      gmake
      gmake PLATFORM=[darwin|linux|freebsd]
      gmake rpc
      gmake rpc PLATFORM=[darwin|linux|freebsd]



---------------------------------------------------------------


If you prefer to build all of the projects individually, they are below for
my notes. But the above step should be enough to take care of everything for
most people.

--- (optional) build the XmlRpc++ library:
cd xmlrpcpp;
make

--- Build the Library:
cd OTLib;
make PLATFORM=[darwin|linux|freebsd]

output will be libOTLib.a
(The other projects/Makefiles will expect that library to be built.)

--- Build the server:
cd ../transaction;
make PLATFORM=[darwin|linux|freebsd] [TRANSPORT=XmlRpc]

--- Build the client:
cd ../testwallet;
make PLATFORM=[darwin|linux|freebsd] [TRANSPORT=XmlRpc]

---------------------------------------------------------------

With the above steps, the library, server, and test client are now built and ready to run.


--- OPTIONAL: Native APIs available for C, C++, C#, Obj-C, Java, Ruby, Python, Perl, Php, Lisp, etc.


cd Open-Transactions/testwallet;
make -f Makefile.API [TRANSPORT=XmlRpc] PLATFORM=[darwin|linux|freebsd] LANGUAGE=[c|csharp|java|ruby|python|perl|php|tcl|lisp]


NOTE:
For some languages (Python) on some platforms (Linux) it might require that OTLib
is built with the variable DYNAMIC_OTLIB=1. So if you get a build error while building
the API, do this:

cd ../OTLib; make clean; make DYNAMIC_OTLIB=1; cd ../testwallet

(Now try to build your API interface again.)

More detailed notes in Open-Transactions/testwallet/API-README.txt

--------------------------------------------------------


TO RUN:

(Assuming you have already built the projects, including OTLib first.)

The client and server expect to be run from the command line in their respective folders. 

cd testwallet       (for client) 
cd transaction      (for server)

If you are in the transaction folder, then run it like this:
./transaction.exe


if you are in the testwallet folder, then run the wallet like this:
./testwallet.exe


You don't have to specify a hostname and port, because the server contract
already contains that information.

(In the server contract that comes with this test distribution,
the hostname is localhost and port is 7085.)



USING THE SOFTWARE:

I already created your user account. The password is test (always)

==> With the server, all you can do is watch the output as it runs.

==> But with the client, there is a command-line interface. 

**** READ:  docs/CLIENT-COMMANDS.txt  for a list of the Wallet's commands.
I will soon add that file to a help command inside the wallet.
You can create asset accounts, issue new asset types, 
transfer assets, get inbox, process inbox,
withdraw cash, deposit cash, getcontract, getmint.
You can also create basket currencies and exchange between normal 
asset accounts and basket accounts. (To the server it's just another 
account type.)  You can also write and deposit cheques, and withdraw 
vouchers. 

REMEMBER: If you move some assets, and you don't see the change show up in your 
account, then you probably just need to type "get" (to get the latest copy of the 
account after a change has just been made.) Another useful command is 'i' for 
grabbing the inbox of any specific account. Then "get", and then "stat" to see 
the balances change.

Obviously a nice client will do this automatically.



Let's organize to make a pretty GUI for various platforms, eh?


------------------------------------




